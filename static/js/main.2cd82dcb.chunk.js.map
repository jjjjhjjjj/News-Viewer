{"version":3,"sources":["components/Categories.jsx","components/NewsItem.jsx","components/NewsList.jsx","components/NewsTemplate.jsx","App.js","serviceWorker.js","index.js"],"names":["Categories","memo","categoryList","name","text","map","c","key","exact","to","className","NewsItem","article","title","description","urlToImage","url","href","src","alt","NewsList","category","useState","articles","setArticles","loading","setLoading","useEffect","a","query","Axios","get","response","data","console","log","loadArticle","NewsTemplate","match","params","App","path","component","Boolean","window","location","hostname","ReactDOM","render","basename","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"ySAiCeA,G,MA7BIC,gBAAK,WACtB,IAUMC,EAVa,CACjB,CAAEC,KAAM,MAAOC,KAAM,4BACrB,CAAED,KAAM,WAAYC,KAAM,4BAC1B,CAAED,KAAM,gBAAiBC,KAAM,wCAC/B,CAAED,KAAM,SAAUC,KAAM,gBACxB,CAAED,KAAM,UAAWC,KAAM,gBACzB,CAAED,KAAM,SAAUC,KAAM,sBACxB,CAAED,KAAM,aAAcC,KAAM,iBAGEC,KAAI,SAACC,GAAD,OAClC,wBAAIC,IAAKD,EAAEH,MACT,kBAAC,IAAD,CACEK,MAAkB,QAAXF,EAAEH,KACTM,GAAe,QAAXH,EAAEH,KAAiB,IAAnB,WAA6BG,EAAEH,OAElCG,EAAEF,UAKT,OACE,oCACE,wBAAIM,UAAU,iBAAiBR,Q,iCCNtBS,EApBEV,gBAAK,YAAkB,IAAfW,EAAc,EAAdA,QACfC,EAAwCD,EAAxCC,MAAOC,EAAiCF,EAAjCE,YAAaC,EAAoBH,EAApBG,WAAYC,EAAQJ,EAARI,IACxC,OACE,4BACE,uBAAGC,KAAMD,GACP,yBAAKN,UAAU,WACb,yBACEQ,IAAKH,GAAc,kCACnBI,IAAI,qCAGR,yBAAKT,UAAU,eACb,gCAASG,GACT,2BAAIC,S,iBCgCCM,G,MA1CEnB,gBAAK,YAAmB,IAAhBoB,EAAe,EAAfA,SAAe,EACNC,qBADM,mBAC/BC,EAD+B,KACrBC,EADqB,OAERF,qBAFQ,mBAE/BG,EAF+B,KAEtBC,EAFsB,KAqBtC,OAjBAC,qBAAU,YACS,uCAAG,8BAAAC,EAAA,sEAEhBF,GAAW,GACLG,EAAqB,QAAbR,EAAqB,GAArB,oBAAuCA,GAHrC,SAIOS,IAAMC,IAAN,yDAC6BF,EAD7B,6CAJP,OAIVG,EAJU,OAOhBR,EAAYQ,EAASC,KAAKV,UAPV,gDAShBW,QAAQC,IAAR,MATgB,QAWlBT,GAAW,GAXO,yDAAH,qDAajBU,KACC,CAACf,IAEAI,EAEA,oCACE,uDAKDF,EAKH,wBAAIb,UAAU,aACXa,EAASlB,KAAI,SAACO,GAAD,OACZ,kBAAC,EAAD,CAAUL,IAAKK,EAAQI,IAAKJ,QAASA,QANlC,iFCpBIyB,EAXM,SAAC,GAAe,IAC7BhB,EAD4B,EAAZiB,MACCC,OAAOlB,UAAY,MAE1C,OACE,oCACE,kBAAC,EAAD,CAAYA,SAAUA,IACtB,kBAAC,EAAD,CAAUA,SAAUA,MCAXmB,MAJf,WACE,OAAO,kBAAC,IAAD,CAAOC,KAAK,cAAcC,UAAWL,KCK1BM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASR,MACvB,2DCXNS,IAASC,OACP,kBAAC,IAAD,CAAeC,SAAS,gBACtB,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzB,QAAQyB,MAAMA,EAAMC,c","file":"static/js/main.2cd82dcb.chunk.js","sourcesContent":["import React, { memo } from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport \"./categories.css\";\r\n\r\nconst Categories = memo(() => {\r\n  const categories = [\r\n    { name: \"all\", text: \"전체보기\" },\r\n    { name: \"business\", text: \"비즈니스\" },\r\n    { name: \"entertainment\", text: \"엔터테인먼트\" },\r\n    { name: \"health\", text: \"건강\" },\r\n    { name: \"science\", text: \"과학\" },\r\n    { name: \"sports\", text: \"스포츠\" },\r\n    { name: \"technology\", text: \"기술\" },\r\n  ];\r\n\r\n  const categoryList = categories.map((c) => (\r\n    <li key={c.name}>\r\n      <NavLink\r\n        exact={c.name === \"all\" ? true : false}\r\n        to={c.name === \"all\" ? \"/\" : `/${c.name}`}\r\n      >\r\n        {c.text}\r\n      </NavLink>\r\n    </li>\r\n  ));\r\n\r\n  return (\r\n    <>\r\n      <ul className=\"category-list\">{categoryList}</ul>\r\n    </>\r\n  );\r\n});\r\n\r\nexport default Categories;\r\n","import React, { memo } from \"react\";\r\n\r\nconst NewsItem = memo(({ article }) => {\r\n  const { title, description, urlToImage, url } = article;\r\n  return (\r\n    <li>\r\n      <a href={url}>\r\n        <div className=\"img-box\">\r\n          <img\r\n            src={urlToImage || \"https://via.placeholder.com/160\"}\r\n            alt=\"기사 이미지\"\r\n          />\r\n        </div>\r\n        <div className=\"content-box\">\r\n          <strong>{title}</strong>\r\n          <p>{description}</p>\r\n        </div>\r\n      </a>\r\n    </li>\r\n  );\r\n});\r\n\r\nexport default NewsItem;\r\n","import React, { memo, useState, useEffect } from \"react\";\r\nimport NewsItem from \"./NewsItem\";\r\nimport Axios from \"axios\";\r\nimport \"./newslist.css\";\r\n\r\nconst NewsList = memo(({ category }) => {\r\n  const [articles, setArticles] = useState();\r\n  const [loading, setLoading] = useState();\r\n\r\n  useEffect(() => {\r\n    const loadArticle = async () => {\r\n      try {\r\n        setLoading(true);\r\n        const query = category === \"all\" ? \"\" : `&category=${category}`;\r\n        const response = await Axios.get(\r\n          `https://newsapi.org/v2/top-headlines?country=kr${query}&apiKey=e105dce0debe457b82f5509ad9534c52`\r\n        );\r\n        setArticles(response.data.articles);\r\n      } catch (e) {\r\n        console.log(e);\r\n      }\r\n      setLoading(false);\r\n    };\r\n    loadArticle();\r\n  }, [category]);\r\n\r\n  if (loading) {\r\n    return (\r\n      <>\r\n        <div>로딩중...</div>\r\n      </>\r\n    );\r\n  }\r\n\r\n  if (!articles) {\r\n    return <div>기사가 없습니다.</div>;\r\n  }\r\n\r\n  return (\r\n    <ul className=\"news-list\">\r\n      {articles.map((article) => (\r\n        <NewsItem key={article.url} article={article} />\r\n      ))}\r\n    </ul>\r\n  );\r\n});\r\n\r\nexport default NewsList;\r\n","import React from \"react\";\r\nimport Categories from \"./Categories\";\r\nimport NewsList from \"./NewsList\";\r\n\r\nconst NewsTemplate = ({ match }) => {\r\n  const category = match.params.category || \"all\";\r\n\r\n  return (\r\n    <>\r\n      <Categories category={category} />\r\n      <NewsList category={category} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default NewsTemplate;\r\n","import React from \"react\";\nimport \"./App.css\";\n\nimport { Route } from \"react-router-dom\";\nimport NewsTemplate from \"./components/NewsTemplate\";\n\nfunction App() {\n  return <Route path=\"/:category?\" component={NewsTemplate} />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <BrowserRouter basename=\"/News-Viewer\">\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}